Controller配置方式

第一种 URL对应Bean
如果要使用此类配置方式，需要在XML中做如下样式配置

<!-- 配置HandlerMapping -->
<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
<!-- 配置请求和处理器 -->
<bean name="/hello.do" class="com.safziy.springmvc.HelloController"/>

以上配置，访问/hello.do就会寻找ID为/hello.do的Bean，此类方式仅适用小型的应用系统

第二种 为URL分配Bean
使用一个统一配置集合，对各个URL对应的Controller做关系映射

<!-- 为URL分配Bean 可以支持通配符 -->
<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
        <props> 
            <prop key="/hello.do">helloController</prop>
            <prop key="/hello*.do">helloController</prop>
        </props>
    </property>
</bean>
<bean id="helloController" class="com.safziy.springmvc.HelloController" />

此类配置还可以使用通配符，访问/hello.do时，Spring会把请求分配给helloController进行处理

第三种 URL匹配Bean
如果定义的Controller名称规范，也可以使用如下配置

<!-- 将hello*.do交给helloController处理-->
<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" />
<bean name="helloController" class="com.safziy.springmvc..HelloController" />

第四种 注解
首先在配置文件中开启注解

<!-- 启用 spring 注解 -->
<context:component-scan base-package="com.safziy.springmvc." />
<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>

在编写类上使用注解@org.springframework.stereotype.Controller标记这是个Controller对象
使用@RequestMapping("/hello.do")指定方法对应处理的路径，这里只是简单示例，会有更复杂配置
代码类如下：

package com.safziy.springmvc;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

// 通过注解的方式 来实现Controller
@Controller
public class TimeController {

    @RequestMapping("time")
    public ModelAndView time(HttpServletRequest request, HttpServletResponse response) {
        ModelAndView mv = new ModelAndView();
        mv.addObject("time", new Date());
        mv.setViewName("time");
        return mv;
    }

}
