拦截器

1.实现拦截器 --- 实现HandlerInterceptor接口
    public class HelloInterceptor implements HandlerInterceptor {

        // 在请求处理的方法前执行
        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            System.out.println("HelloInterceptor preHandle()  ----  执行前");
            return true;
        }

        // 在请求处理的方法执行完之后执行
        @Override
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                ModelAndView modelAndView) throws Exception {
            System.out.println("HelloInterceptor postHandle()  ----  执行后");
        }

        // 在DispatcherServlet处理后执行 ----一般用来做清理工作
        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
                throws Exception {
            System.out.println("HelloInterceptor afterCompletion()  ----  清理");
        }

    }

2.配置拦截器
    /** 拦截路径及其子路径 例如 /admin/** 则拦截 /admin/add /admin/update /admin/sub/add 等等 如果配置成 /admin/* 则不会拦截 /admin/sub/add 等子路径下的请求
    <mvc:exclude-mapping path="/login"/>  可以指定不拦截那些请求
    
    <!-- 拦截器的配置 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 配置为/** 包括路径及其子路径 -->
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/login"/>
            <bean class="com.safziy.interceptor.HelloInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>

3.在拦截器中可以转发或重定向



